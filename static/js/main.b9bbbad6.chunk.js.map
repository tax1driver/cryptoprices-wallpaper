{"version":3,"sources":["Ticker.js","Symbol.js","App.js","serviceWorker.js","index.js"],"names":["TickerCharacterColumn","React","Component","props","renderChars","bind","this","char","charsSet","textSize","charIndex","indexOf","containerHeight","style","transform","boxSizing","className","opts","charStyle","height","padding","lineHeight","fontSize","color","fontWeight","textAlign","width","map","idx","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Filler","Symbol","state","currentPrice","prevPrice","changeDaily","volume","updateTime","lastId","hasErrored","currentDayData","updatePrices","updateDayChart","setInterval","curTimestamp","Date","getTime","pastTimestamp","data","fetch","pair","then","response","json","forEach","kline","close","push","catch","e","console","log","newState","Object","assign","setState","date","utc","replace","m","slice","parseFloat","lastPrice","priceChangePercent","quoteVolume","tickSymbol","tickClass","x","preferences","chartData","labels","Array","from","length","keys","datasets","fill","borderColor","borderWidth","backgroundColor","tension","pointRadius","type","options","responsive","plugins","legend","display","scales","y","layout","ref","asset","toFixed","precision","toString","App","searchParams","URLSearchParams","window","location","search","symbols","entries","symbol","split","assetName","prec","parseInt","Boolean","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b9bbbad6.chunk.js","sourcesContent":["import React from 'react'\r\nimport { TransitionGroup } from 'react-transition-group'\r\n\r\nclass Ticker extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.validateValue = this.validateValue.bind(this);\r\n  }\r\n  \r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return this.validateValue(nextProps.value, nextProps.charsSet);\r\n  }\r\n  \r\n  render() {\r\n    let {value, charsSet, textSize = 20} = this.props;\r\n    let style = {\r\n      fontFamily: '\"Lato\", Arial, sans-serif',\r\n      display: 'flex',\r\n      overflow: 'hidden',\r\n      justifyContent: 'center'\r\n    };\r\n\r\n    let characterColumns = value.toString().split('').map((char, idx) => {\r\n        return <TickerCharacterColumn key={idx} textSize={textSize} char={char} charsSet={charsSet}/>\r\n    });\r\n    \r\n    return (\r\n      <TransitionGroup component=\"div\" style={style} transitionName=\"char-column\" transitionEnterTimeout={400} transitionLeaveTimeout={400}>\r\n        {characterColumns}\r\n      </TransitionGroup>\r\n    )\r\n  }\r\n  \r\n  validateValue(value, charsSet) {\r\n    let charIsInCharsSet = (char) => {\r\n      return charsSet.indexOf(char) !== -1;\r\n    };\r\n    \r\n    return typeof value === 'string' &&\r\n           value.split('').every(charIsInCharsSet);\r\n  }\r\n}\r\n\r\nclass TickerCharacterColumn extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.renderChars = this.renderChars.bind(this);\r\n  }\r\n  \r\n  render() {\r\n    let {char, charsSet, textSize = 20} = this.props;\r\n    let textWidth = textSize * 0.75;\r\n    let charIndex = charsSet.indexOf(char);\r\n    let containerHeight = textSize * 1.5;\r\n    let translateY = -1 * charIndex * containerHeight;\r\n    let style = {\r\n      transform: `translate(0, ${translateY}px)`,\r\n      boxSizing: 'border-box'\r\n    };\r\n    \r\n    return (\r\n        <div className=\"ticker__char-column\" style={style}>\r\n          {this.renderChars({\r\n            textSize,\r\n            containerHeight\r\n          })}\r\n        </div>\r\n    )\r\n  }\r\n  renderChars(opts) {\r\n    let {charsSet = []} = this.props;\r\n    let {textSize, containerHeight} = opts;\r\n    let charStyle = {\r\n      height: containerHeight,\r\n      padding: 0,\r\n      lineHeight: `${containerHeight}px`,\r\n      fontSize: textSize,\r\n      color: '#fff',\r\n      fontWeight: 100,\r\n      textAlign: 'center',\r\n      width: 30\r\n    };\r\n    \r\n    return charsSet.map((char, idx) => {\r\n      return <div key={idx} className=\"ticker__char-column__char\" style={charStyle}>{char}</div>;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Ticker;","import React from \"react\"\r\nimport Ticker from \"./Ticker\"\r\n\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    Filler\r\n} from 'chart.js';\r\n\r\nimport { Chart } from \"react-chartjs-2\"\r\n\r\nfunction dateFormat (date, fstr, utc) {\r\n    utc = utc ? 'getUTC' : 'get';\r\n    return fstr.replace (/%[YmdHMS]/g, function (m) {\r\n      switch (m) {\r\n      case '%Y': return date[utc + 'FullYear'] (); // no leading zeros required\r\n      case '%m': m = 1 + date[utc + 'Month'] (); break;\r\n      case '%d': m = date[utc + 'Date'] (); break;\r\n      case '%H': m = date[utc + 'Hours'] (); break;\r\n      case '%M': m = date[utc + 'Minutes'] (); break;\r\n      case '%S': m = date[utc + 'Seconds'] (); break;\r\n      default: return m.slice (1); // unknown code, remove %\r\n      }\r\n      // add leading zero if required\r\n      return ('0' + m).slice (-2);\r\n    });\r\n}\r\n\r\nfunction numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler\r\n);\r\n\r\nclass Symbol extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            currentPrice: 0,\r\n            prevPrice: 0,\r\n            changeDaily: 0, \r\n            volume: 0,\r\n            updateTime: \"\",\r\n            lastId: 0,\r\n            hasErrored: false,\r\n            currentDayData: {}\r\n        }\r\n\r\n        \r\n\r\n        this.updatePrices = this.updatePrices.bind(this)\r\n        this.updateDayChart = this.updateDayChart.bind(this)\r\n\r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval(this.updatePrices, 1000)\r\n        setInterval(this.updateDayChart(), 3*60*1000)\r\n    }\r\n\r\n    updateDayChart() {\r\n        let curTimestamp = new Date().getTime();\r\n        let pastTimestamp = curTimestamp - (24*60*60*1000); // -24h\r\n\r\n        let data = []\r\n        fetch(`https://api.binance.com/api/v3/klines?symbol=${this.props.pair}&interval=15m&startTime=${pastTimestamp}&endTime=${curTimestamp}&limit=400`)\r\n            .then(response => response.json())\r\n            .then((json) => {\r\n                json.forEach(kline => {\r\n                    let close = kline[4];\r\n                    data.push(close);\r\n                });\r\n            })\r\n            .catch((e) => {\r\n                console.log(e)\r\n            })\r\n\r\n        let newState = Object.assign({}, this.state);\r\n        newState.currentDayData = data;\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    updatePrices() {\r\n        fetch(\"https://api.binance.com/api/v3/ticker/24hr?symbol=\"+this.props.pair)\r\n            .then(response => response.json())\r\n            .then((json) => {\r\n                let updateTime = this.state.updateTime\r\n\r\n                if (json.lastId !== this.state.lastId) {\r\n                    //console.log(\"updated\")\r\n                    updateTime = dateFormat(new Date(), \"%H:%M:%S %d-%m-%Y\")\r\n\r\n                    this.setState({\r\n                        currentPrice: parseFloat(json.lastPrice),\r\n                        prevPrice: parseFloat(this.state.currentPrice),\r\n                        changeDaily: parseFloat(json.priceChangePercent),\r\n                        volume: parseFloat(json.quoteVolume),\r\n                        lastId: json.lastId,\r\n                        updateTime,\r\n                        hasErrored: false,\r\n                        currentDayData: this.state.currentDayData\r\n                    })\r\n                }\r\n\r\n                \r\n            }).catch((e) => {\r\n                this.setState({\r\n                    currentPrice: 0,\r\n                    prevPrice: 0,\r\n                    changeDaily: 0,\r\n                    volume: 0,\r\n                    updateTime: 0,\r\n                    hasErrored: true,\r\n                    currentDayData: this.state.currentDayData\r\n                })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        let tickSymbol = \"remove\"\r\n        let tickClass = \"tick-zero\"\r\n\r\n        if (this.state.currentPrice > this.state.prevPrice) {\r\n            tickSymbol = \"arrow_upward\"\r\n            tickClass = \"tick-pos\"\r\n        } else if (this.state.currentPrice < this.state.prevPrice) {\r\n            tickSymbol = \"arrow_downward\"\r\n            tickClass = \"tick-neg\"\r\n        }\r\n\r\n        const chartOptions = {\r\n            responsive: false, \r\n            plugins: {\r\n                legend: {\r\n                    display: false\r\n                }\r\n            },\r\n            scales: {\r\n                y: {\r\n                    display: false\r\n                },\r\n                x: {\r\n                    display: false\r\n                }\r\n            },\r\n            layout: {\r\n                padding: 0\r\n            }\r\n        }\r\n\r\n        //TODO: prefs!!\r\n        const preferences = {\r\n            chartVisibility: 1,\r\n            interpTension: 0.2\r\n        }\r\n\r\n        const chartData = {\r\n            labels: Array.from(Array(this.state.currentDayData.length).keys()),\r\n            datasets: [{\r\n                data: this.state.currentDayData,\r\n                fill: true,\r\n                borderColor: this.state.changeDaily < 0 ? `rgba(175, 63, 61, ${0.25 * preferences.chartVisibility})` \r\n                                : `rgba(21, 159, 73, ${0.25 * preferences.chartVisibility})`,\r\n                borderWidth: 2,\r\n                backgroundColor: this.state.changeDaily < 0 ? `rgba(175, 63, 61, ${0.125 * preferences.chartVisibility})` \r\n                                : `rgba(21, 159, 73, ${0.125 * preferences.chartVisibility})`,\r\n                tension: preferences.interpTension,\r\n                pointRadius: 0\r\n            }]\r\n        }\r\n\r\n        return (\r\n        <div className=\"symbol\">\r\n            <div className=\"symbol__chart\">\r\n                <Chart type=\"line\" options={chartOptions} data={chartData} width={430} height={180} />\r\n            </div>\r\n            <div className=\"symbol__row-info\">\r\n              <span className=\"symbol__name\" ref=\"name\">\r\n                {this.props.asset}\r\n              </span>\r\n              {/*<Ticker className=\"symbol__price\" textSize={45} value={this.state.currentPrice} charsSet={'$0123456789.'.split('')} />*/}\r\n\r\n              <span className=\"symbol__price\">${this.state.currentPrice.toFixed(this.props.precision)}</span>\r\n              <span className={\"symbol__tick \" + tickClass}>\r\n                  <span className=\"material-icons\">\r\n                    {tickSymbol}\r\n                  </span>\r\n              </span>\r\n            </div>\r\n            <div className=\"symbol__row-info\">\r\n              <div className=\"symbol__meta\">\r\n                <span className=\"symbol__meta-title\">CHANGE 24H</span>\r\n                <span className={\"symbol__meta-desc \" + (this.state.changeDaily >= 0 ? \"tick-pos\" : \"tick-neg\")}>{this.state.changeDaily.toFixed(2)}%</span>\r\n              </div>\r\n              <div className=\"symbol__meta\">\r\n                <span className=\"symbol__meta-title\">VOLUME</span>\r\n                <span className=\"symbol__meta-desc\">${numberWithCommas(this.state.volume.toFixed(0))}</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"symbol__row-spacer\"></div>\r\n            <div className=\"symbol__row-info\">\r\n              <span className={\"symbol__status \" + (this.state.hasErrored ? \"tick-neg\" : \"tick-pos\")}>\r\n                  { this.state.hasErrored ? \"ERROR\" : \"MARKET OPEN\" }\r\n              </span>\r\n              <span className=\"symbol__exchange\">\r\n                  { this.state.hasErrored ? \"\" : (\"/ BINANCE / UPDATED \" + this.state.updateTime)}\r\n              </span>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Symbol;","import Symbol from \"./Symbol\"\n\n// function App() {\n//   return (\n//     <div className=\"app\">\n//       <div className=\"box-vertical\">\n//         <div className=\"box-horizontal\">\n//           <div className=\"symbol\">\n//             <div className=\"symbol__row-info\">\n//               <span className=\"symbol__name\">\n//                 BTC\n//               </span>\n//               <span className=\"symbol__price\">$324.54</span>\n//               <span className=\"symbol__tick tick-pos\">↑</span>\n//             </div>\n//             <div className=\"symbol__row-info\">\n//               <div className=\"symbol__meta\">\n//                 <span className=\"symbol__meta-title\">CHANGE 24H</span>\n//                 <span className=\"symbol__meta-desc tick-pos\">+2.39%</span>\n//               </div>\n//               <div className=\"symbol__meta\">\n//                 <span className=\"symbol__meta-title\">VOLUME</span>\n//                 <span className=\"symbol__meta-desc\">$154 239 281 000</span>\n//               </div>\n//             </div>\n//             <div className=\"symbol__row-spacer\"></div>\n//             <div className=\"symbol__row-info\">\n//               <span className=\"symbol__status tick-pos\">MARKET OPEN</span>\n//               <span className=\"symbol__exchange\"> / BINANCE / UPDATED 5:46 PM 21 SEP 2021</span>\n//             </div>\n//           </div>\n//           <div className=\"symbol\">bSDSDS</div>\n//           <div className=\"symbol\">c</div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n\n\nconst App = (props) => {\n  const searchParams = new URLSearchParams(window.location.search); \n\n  let symbols = [];\n  for (let symbol of searchParams.entries()) {\n    console.log(symbol)\n    let [qsName, value] = symbol;\n\n    let [assetName, pair, prec] = value.split(\";\");\n    symbols.push(<Symbol asset={assetName} pair={pair} precision={parseInt(prec)}/>)\n    console.log(symbols)\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"box-vertical\">\n        <div className=\"box-horizontal\">\n          {symbols}\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }\r\n  ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst app = (\r\n    <App />\r\n)\r\n\r\nReactDOM.render(app, document.getElementById('root'));  \r\nserviceWorker.unregister();"],"sourceRoot":""}